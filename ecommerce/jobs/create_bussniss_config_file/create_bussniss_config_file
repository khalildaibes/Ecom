import argparse
import json
import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

# from ecommerce.common.helpFunctions.common import install_requirements

from ecommerce.common.api.chatgpt import chatGptManager

def generate_config_json(
        email, password, new_business_name, small_description, template_id, categories,
        logo_file, phone, address, products_file=None, location_in_waze=None, css_file=None, banner_photo=None
    ):
    # Create a dictionary to hold the config data
    config_data = {
        "email": email,
        "password": password,
        "business": {
            "name": new_business_name,
            "description": small_description,
            "template_id": template_id,
            "categories": categories.split(',') if isinstance(categories, str) else categories,
            "logo_file": logo_file,
            "products_file": products_file,
            "phone": phone,
            "address": address,
            "location_in_waze": location_in_waze if location_in_waze else None,
            "css_file": css_file if css_file else None,
            "banner_photo": banner_photo if banner_photo else None
        }
    }

    # Define the output config JSON file name
    # Get the directory of the current script
    script_directory = os.path.dirname(os.path.abspath(__file__))

    # Define the output config JSON file path in the script's directory
    output_file = os.path.join(script_directory, f"{new_business_name}_config.json")
    
    # Write the dictionary to a JSON file
    with open(output_file, 'w') as json_file:
        json.dump(config_data, json_file, indent=4)

    print(f"Configuration file '{output_file}' generated successfully.")
    
def main():
    # install_requirements()
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Generate a config JSON file from parameters")
    
    parser.add_argument('--email', required=True, help='Email address')
    parser.add_argument('--password', required=True, help='Password')
    parser.add_argument('--new_business_name', required=True, help='New business name')
    parser.add_argument('--small_description', required=True, help='Small description of the business')
    parser.add_argument('--Template_ID', required=True, help='Template ID')
    parser.add_argument('--categories', required=True, help='Categories (comma-separated)')
    parser.add_argument('--logo_file', required=True, help='Logo image file path')
    parser.add_argument('--phone', required=True, help='Business phone number')
    parser.add_argument('--address', required=True, help='Business address')
    parser.add_argument('--products_file', required=False, help='Products file path (CSV or Excel)')
    parser.add_argument('--location_in_waze', required=False, help='Location in Waze (optional)')
    parser.add_argument('--css_file', required=False, help='CSS file path (optional)')
    parser.add_argument('--banner_photo', required=False, help='Banner photo path (optional)')

    args = parser.parse_args()

    # Call the function to generate the config JSON file
    generate_config_json(
        email=args.email,
        password=args.password,
        new_business_name=args.new_business_name,
        small_description=args.small_description,
        template_id=args.Template_ID,
        categories=args.categories,
        logo_file=args.logo_file,
        products_file=args.products_file,
        phone=args.phone,
        address=args.address,
        location_in_waze=args.location_in_waze,
        css_file=args.css_file,
        banner_photo=args.banner_photo
    )
    api_key = os.getenv('OPEN_AI_KEY')
    print(api_key)
    chatgpt_manager = chatGptManager.ChatGPTManager(api_key=os.getenv('OPEN_AI_KEY'))
    response_json = chatgpt_manager.generate_json_data(project_name=args.new_business_name)
    print(response_json)


if __name__ == "__main__":
    main()
