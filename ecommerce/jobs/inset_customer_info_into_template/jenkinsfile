pipeline {
    agent any

    parameters {
        file(name: 'user_config_file', description: 'Upload the user_config_file.json')
    }

    environment {
        PYTHON_SCRIPT = "${WORKSPACE}/ecommerce/jobs/create_bussniss_config_file/create_bussniss_config_file"
        GITHUB_TOKEN = credentials('github-pat') // 'github-pat' is the ID of the stored GitHub PAT credential
    }

    stages {

        stage('Run Python Script') {
            steps {
                withCredentials([string(credentialsId: 'github-pat', variable: 'GITHUB_TOKEN')]) {
                    echo 'Running Python script...'
                    script {
                        if (isUnix()) {
                            sh """
                                python3 ${PYTHON_SCRIPT} \
                                --user_config_file ${params.user_config_file} \

                            """
                        } else {
                            bat """
                                python ${PYTHON_SCRIPT} ^
                                --user_config_file "${params.user_config_file}" 
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution finished.'
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline succeeded!'
             script {
                    def configFile = "${WORKSPACE}/ecommerce/jobs/create_bussniss_config_file/${params.new_business_name}_config.json"
                    archiveArtifacts artifacts: configFile, excludes: 'output/*.md'
                    echo "Archived: ${configFile}"
                }
        }
    }
}
