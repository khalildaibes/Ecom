pipeline {
    agent any
    parameters {
        string(name: 'ip_address', defaultValue: '', description: 'Enter IP address', trim: true)
        string(name: 'vpc_name', defaultValue: '', description: 'VPC/Droplet name', trim: true)
    }
    environment {
        LANG = 'en_US.UTF-8'
        LC_ALL = 'en_US.UTF-8'
        PYTHON_SCRIPT = "${WORKSPACE}/ecommerce/jobs/install_strapi/install.py"
    }
    stages {
        stage('Check Python Environment') {
            steps {
                bat 'where python'
                bat 'python --version'
                bat 'pip list'
            }
        }
        stage('Install Python Libraries') {
            steps {
                bat 'python --version'
                bat 'pip install python-jenkins paramiko retrying'
            }
        }
        stage('Setup') {
            steps {
                echo 'Setting up the environment'
                echo "IP Address: ${params.ip_address}"
                echo "VPC Name: ${params.vpc_name}"
            }
        }
        stage('Run Python Script') {
            steps {
                withCredentials([
                    string(credentialsId: 'github-pat', variable: 'GITHUB_TOKEN'),
                    string(credentialsId: 'sanityadmintoken', variable: 'SANITY_AUTH_TOKEN'),
                    string(credentialsId: 'openaikey', variable: 'OPEN_AI_KEY'),
                    string(credentialsId: 'VercelToken', variable: 'VERCEL_TOKEN'),
                    string(credentialsId: 'JENKINS_API_TOKEN', variable: 'JENKINS_TOKEN')
                ]) {
                    withEnv(["WORKSPACE=${env.WORKSPACE}"]) {

                       echo "Using GITHUB_TOKEN: ${env.GITHUB_TOKEN}"

                        echo 'Running Python script...'
                        script {
                            if (isUnix()) {
                                sh """
                                    python3 ${PYTHON_SCRIPT} \
                                        --ip_address "${params.ip_address}" \
                                        --vpc_name "${params.vpc_name}"
                                """
                            } else {
                                bat """
                                    python ${PYTHON_SCRIPT} ^
                                        --ip_address "${params.ip_address}" ^
                                        --vpc_name "${params.vpc_name}"
                                """
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline execution finished.'
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
    }
}
